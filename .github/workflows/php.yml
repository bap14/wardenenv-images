name: Base PHP Images

env:
  WARDEN_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}
  DOCKER_IMAGE_REPOSITORY: ${{ vars.DOCKER_IMAGE_REPOSITORY || 'docker.io/wardenenv' }}
  PHP_SOURCE_IMAGE: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}/centos-php

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # 6 AM Daily
  push:
    branches:
      - main
      - develop
    paths:
      - php/**
      - .github/workflows/php.yml
      - php-fpm/**
      - scripts/build.sh

jobs:
  php-setup:
      name: PHP Setup
      runs-on: ubuntu-latest
      outputs:
        active_versions: ${{ steps.get_php_versions.outputs.active_versions}}
        active_major_versions: ${{ steps.get_php_versions.outputs.active_major_versions}}
        active_minor_versions: ${{ steps.get_php_versions.outputs.active_minor_versions}}
        legacy_versions: ${{ steps.get_php_versions.outputs.legacy_versions}}
        legacy_major_versions: ${{ steps.get_php_versions.outputs.legacy_major_versions}}
        legacy_minor_versions: ${{ steps.get_php_versions.outputs.legacy_minor_versions}}
      steps:
        - uses: actions/checkout@v4
        - name: Gather PHP Versions
          id: get_php_versions
          env:
            MINIMUM_VERSION: "7.4"
          run: bash php/scripts/get-versions.sh
  legacy-php:
    name: Build Legacy PHP Images
    runs-on: ubuntu-latest
    needs: [php-setup]
    strategy:
      matrix:
        php_version: ${{ fromJSON(needs.php-setup.outputs.legacy_major_versions) }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Caching Layers for Docker
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
          key: ${{ runner.os }}-buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-cache-php-${{ matrix.php_version }}-
      # - name: Cache folder content
      #   run: |
      #     tree -f -pug -h -D ${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
      - name: Build & Push ${{ matrix.php_version }}
        env:
          PRE_AUTH: 1
          # WARDEN_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY }}
          IMAGE_NAME: centos-php
          VERSION_LIST: ${{ matrix.php_version }}
          VARIANT_LIST: cli cli-loaders fpm fpm-loaders
          PUSH_FLAG: 0
          # CACHE_FROM: type=gha,scope=buildx-cache-php-${{ matrix.php_version }}
          # CACHE_TO: type=gha,mode=max,scope=buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          CACHE_FROM: type=local,src=${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
          CACHE_TO: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        run: bash php/scripts/build.sh
      # - name: Move cache
      #   # Temp fix
      #   # https://github.com/docker/build-push-action/issues/252
      #   # https://github.com/moby/buildkit/issues/1896
      #   run: |
      #     rm -rf ${{ runner.temp }}/.buildx-cache-legacy-php
      #     mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache-legacy-php
  php:
    name: Build Active PHP Images
    runs-on: ubuntu-latest
    needs: [php-setup]
    strategy:
      matrix:
        php_version: ${{ fromJSON(needs.php-setup.outputs.active_major_versions) }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Caching Layers for Docker
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
          key: ${{ runner.os }}-buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-cache-php-${{ matrix.php_version }}-
      # - name: Cache folder content
      #   run: |
      #     tree -f -pug -h -D ${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
      - name: Build & Push ${{ matrix.php_version }}
        env:
          PRE_AUTH: 1
          IMAGE_NAME: centos-php
          VERSION_LIST: ${{ matrix.php_version }}
          VARIANT_LIST: cli cli-loaders fpm fpm-loaders
          # CACHE_FROM: type=gha,scope=buildx-cache-php-${{ matrix.php_version }}
          # CACHE_TO: type=gha,mode=max,scope=buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          CACHE_FROM: type=local,src=${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
          CACHE_TO: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          PUSH_FLAG: 0
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        run: bash php/scripts/build.sh

  php-fpm:
    name: Build Warden PHP-FPM Images ${{ matrix.php_version }}
    runs-on: ubuntu-latest
    needs: [php, legacy-php]
    strategy:
      matrix:
        php_version:
          - ${{ fromJSON(needs.php-setup.outputs.legacy_major_versions) }}
          - ${{ fromJSON(needs.php-setup.outputs.active_major_versions) }}
        php_variant: ["fpm-loaders"]
    steps:
      - uses: actions/checkout@v4
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Caching Layers for Docker
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
          key: ${{ runner.os }}-buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-cache-php-${{ matrix.php_version }}-
      # - name: Cache folder content
      #   run: |
      #     tree -f -pug -h -D ${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
      - name: Build & Push Images (GitHub)
        env:
          BUILD_GROUP: php-fpm
          PRE_AUTH: 1
          # WARDEN_IMAGE_REPOSITORY: ghcr.io/wardenenv
          # PHP_SOURCE_IMAGE: ghcr.io/wardenenv/centos-php
          PUSH_FLAG: 0
          PHP_VERSION: ${{ matrix.php_version }}
          PHP_VARIANT: ${{ matrix.php_variant }}
          # CACHE_FROM: type=gha,scope=buildx-cache-php-${{ matrix.php_version }}
          # CACHE_TO: type=gha,mode=max,scope=buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          CACHE_FROM: type=local,src=${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
          CACHE_TO: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        run: bash scripts/build.sh "${BUILD_GROUP}"
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & Push Images (Docker Hub)
        env:
          BUILD_GROUP: php-fpm
          PRE_AUTH: 1
          # PHP_SOURCE_IMAGE: ghcr.io/wardenenv/centos-php
          PUSH_FLAG: 1
          PHP_VERSION: ${{ matrix.php_version }}
          PHP_VARIANT: ${{ matrix.php_variant }}
          # CACHE_FROM: type=gha,scope=buildx-cache-php-${{ matrix.php_version }}
          # CACHE_TO: type=gha,mode=max,scope=buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          CACHE_FROM: type=local,src=${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}
          CACHE_TO: type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-php-${{ matrix.php_version }}-${{ github.sha }}
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        run: bash scripts/build.sh "${BUILD_GROUP}"

  # magento1:
    # name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (magento1)
    # runs-on: ubuntu-latest
    # needs: php-fpm
    # strategy:
      # matrix:
        # php_version: ["7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]
        # php_variant: ["fpm-loaders"]
    # steps:
      # - uses: actions/checkout@v4
      # - uses: docker/setup-qemu-action@v3
      # - uses: docker/setup-buildx-action@v3
      # - uses: docker/login-action@v3
        # with:
          # registry: ghcr.io
          # username: ${{ github.repository_owner }}
          # password: ${{ secrets.GITHUB_TOKEN }}
      # - name: Build & Push Images
        # env:
          # BUILD_GROUP: php-fpm/magento1
          # PRE_AUTH: 1
          # WARDEN_IMAGE_REPOSITORY: ghcr.io/wardenenv
          # PHP_SOURCE_IMAGE: ghcr.io/wardenenv/centos-php
          # PUSH_FLAG: 1
          # PHP_VERSION: ${{ matrix.php_version }}
          # PHP_VARIANT: ${{ matrix.php_variant }}
          # INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        # run: bash scripts/build.sh "${BUILD_GROUP}"
      # - uses: docker/login-action@v3
        # with:
          # username: ${{ secrets.DOCKER_USERNAME }}
          # password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Build & Push Images (Docker Hub)
        # env:
          # BUILD_GROUP: php-fpm/magento1
          # PRE_AUTH: 1
          # PHP_SOURCE_IMAGE: ghcr.io/wardenenv/centos-php
          # PUSH_FLAG: 1
          # PHP_VERSION: ${{ matrix.php_version }}
          # PHP_VARIANT: ${{ matrix.php_variant }}
          # INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        # run: bash scripts/build.sh "${BUILD_GROUP}"

  # magento2:
    # name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (magento2)
    # runs-on: ubuntu-latest
    # needs: php-fpm
    # strategy:
      # matrix:
        # php_version: ["7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]
        # php_variant: ["fpm-loaders"]
    # steps:
      # - uses: actions/checkout@v4
      # - uses: docker/setup-qemu-action@v3
      # - uses: docker/setup-buildx-action@v3
      # - uses: docker/login-action@v3
        # with:
          # registry: ghcr.io
          # username: ${{ github.repository_owner }}
          # password: ${{ secrets.GITHUB_TOKEN }}
      # - name: Build & Push Images
        # env:
          # BUILD_GROUP: php-fpm/magento2
          # PRE_AUTH: 1
          # WARDEN_IMAGE_REPOSITORY: ghcr.io/wardenenv
          # PHP_SOURCE_IMAGE: ghcr.io/wardenenv/centos-php
          # PUSH_FLAG: 1
          # PHP_VERSION: ${{ matrix.php_version }}
          # PHP_VARIANT: ${{ matrix.php_variant }}
          # INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        # run: bash scripts/build.sh "${BUILD_GROUP}"
      # - uses: docker/login-action@v3
        # with:
          # username: ${{ secrets.DOCKER_USERNAME }}
          # password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Build & Push Images (Docker Hub)
        # env:
          # BUILD_GROUP: php-fpm/magento2
          # PRE_AUTH: 1
          # PHP_SOURCE_IMAGE: ghcr.io/wardenenv/centos-php
          # PUSH_FLAG: 1
          # PHP_VERSION: ${{ matrix.php_version }}
          # PHP_VARIANT: ${{ matrix.php_variant }}
          # INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        # run: bash scripts/build.sh "${BUILD_GROUP}"

  # orocommerce:
    # name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (OroCommerce)
    # runs-on: ubuntu-latest
    # needs: php-fpm
    # strategy:
      # matrix:
        # php_version: ["8.2", "8.3", "8.4"]
        # php_variant: ["fpm-loaders"]
    # steps:
      # - uses: actions/checkout@v4
      # - uses: docker/setup-qemu-action@v3
      # - uses: docker/setup-buildx-action@v3
      # - uses: docker/login-action@v3
        # with:
          # registry: ghcr.io
          # username: ${{ github.repository_owner }}
          # password: ${{ secrets.GITHUB_TOKEN }}
      # - name: Build & Push Images
        # env:
          # BUILD_GROUP: php-fpm/orocommerce
          # PRE_AUTH: 1
          # WARDEN_IMAGE_REPOSITORY: ghcr.io/wardenenv
          # PHP_SOURCE_IMAGE: ghcr.io/wardenenv/centos-php
          # PUSH_FLAG: 1
          # PHP_VERSION: ${{ matrix.php_version }}
          # PHP_VARIANT: ${{ matrix.php_variant }}
          # INDEV_FLAG: 0 # ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        # run: bash scripts/build.sh "${BUILD_GROUP}"
      # - uses: docker/login-action@v3
        # with:
          # username: ${{ secrets.DOCKER_USERNAME }}
          # password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Build & Push Images (Docker Hub)
        # env:
          # BUILD_GROUP: php-fpm/orocommerce
          # PRE_AUTH: 1
          # PHP_SOURCE_IMAGE: ghcr.io/wardenenv/centos-php
          # PUSH_FLAG: 1
          # PHP_VERSION: ${{ matrix.php_version }}
          # PHP_VARIANT: ${{ matrix.php_variant }}
          # INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        # run: bash scripts/build.sh "${BUILD_GROUP}"
