name: Base PHP Images
on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # 6 AM Daily
  push:
    branches:
      - main
      - develop
    paths:
      - php/**
      - .github/workflows/php.yml
      - php-fpm/**
      - scripts/build.sh

env:
  WARDEN_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}
  DOCKER_IMAGE_REPOSITORY: ${{ vars.DOCKER_IMAGE_REPOSITORY || 'docker.io/wardenenv' }}
  PHP_SOURCE_IMAGE: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}/centos-php

jobs:
  fetch-versions:
    name: PHP Setup
    runs-on: ubuntu-24.04-arm
    outputs:
      active_versions: ${{ steps.get_php_versions.outputs.active_versions}}
      active_major_versions: ${{ steps.get_php_versions.outputs.active_major_versions}}
      active_minor_versions: ${{ steps.get_php_versions.outputs.active_minor_versions}}
      legacy_versions: ${{ steps.get_php_versions.outputs.legacy_versions}}
      legacy_major_versions: ${{ steps.get_php_versions.outputs.legacy_major_versions}}
      legacy_minor_versions: ${{ steps.get_php_versions.outputs.legacy_minor_versions}}
    steps:
      - uses: actions/checkout@v4
      - name: Gather PHP Versions
        id: get_php_versions
        env:
          MINIMUM_VERSION: "7.4"
        run: bash php/scripts/fetch-versions.sh

  legacy:
    name: Legacy PHP
    runs-on: ubuntu-24.04-arm
    needs: [fetch-versions]
    strategy:
      matrix:
        php_version: ${{ fromJSON(needs.fetch-versions.outputs.legacy_major_versions) }}
        platform: [linux/amd64, linux/arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push Images
        env:
          PRE_AUTH: 1
          IMAGE_NAME: centos-php
          VERSION_LIST: ${{ matrix.php_version }}
          VARIANT_LIST: cli cli-loaders fpm fpm-loaders
          PUSH_FLAG: 1
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
          PLATFORMS: ${{ matrix.platform }}
          METADATA_DIR: ${{ runner.temp }}/metadata
        run: bash php/scripts/build.sh
      - name: Push Metadata Files
        uses: actions/upload-artifact@v4
        with:
          name: metadata-${{ matrix.php_version }}
          path: |
            ${{ runner.temp }}/metadata/*
          if-no-files-found: error
          retention-days: 1

  legacy-push:
    name: Push Legacy PHP Manifests
    runs-on: ubuntu-24.04-arm
    needs: [legacy]
    strategy:
      matrix:
        php_version: ${{ fromJSON(needs.fetch-versions.outputs.legacy_major_versions) }}
    steps:
      - name: Download metadata
        uses: actions/download-artifact@v2
        with:
          name: metadata-${{ matrix.php_version }}
          path: ${{ runner.temp }}/metadata
          pattern: metadata-*
          merge-multiple: true
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list ${{ matrix.php_version }}
        run: |
          tagDigests=$(jq -cs '{ tags: (map(keys) | add | unique), digests: (map(.[]) | add | unique) }' ${{ runner.temp }}/metadata/*)
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$tagDigests") \
            $(jq -cr --arg registry "${WARDEN_IMAGE_REPOSITORY}" '.digests | map($registry + "@sha256:" + .) | join(" ")' <<< "$tagDigests")

  # legacy-arm:
  #   name: Legacy PHP (arm64)
  #   runs-on: ubuntu-24.04-arm
  #   needs: [fetch-versions]
  #   strategy:
  #     matrix:
  #       php_version: ${{ fromJSON(needs.fetch-versions.outputs.legacy_major_versions) }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & Push Images
  #       env:
  #         PRE_AUTH: 1
  #         IMAGE_NAME: centos-php
  #         VERSION_LIST: ${{ matrix.php_version }}
  #         VARIANT_LIST: cli cli-loaders fpm fpm-loaders
  #         PUSH_FLAG: 1
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #         PLATFORMS: linux/arm64
  #       run: bash php/scripts/build.sh
    
  # active:
  #   name: PHP
  #   runs-on: ubuntu-24.04-arm
  #   needs: [fetch-versions]
  #   strategy:
  #     matrix:
  #       php_version: ${{ fromJSON(needs.fetch-versions.outputs.active_major_versions) }}
  #       platform: [linux/amd64, linux/arm64]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build ${{ matrix.php_version}} (${{ matrix.platform }})
  #       id: build-active
  #       env:
  #         PRE_AUTH: 1
  #         IMAGE_NAME: centos-php
  #         VERSION_LIST: ${{ matrix.php_version }}
  #         VARIANT_LIST: cli cli-loaders fpm fpm-loaders
  #         PUSH_FLAG: 0
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #         PLATFORMS: ${{ matrix.platform }}
  #       run: bash php/scripts/build.sh

  #active-arm:
  #  name: PHP (arm64)
  #  runs-on: ubuntu-24.04-arm
  #  needs: [fetch-versions]
  #  strategy:
  #    matrix:
  #      php_version: ${{ fromJSON(needs.fetch-versions.outputs.active_major_versions) }}
  #  steps:
  #    - uses: actions/checkout@v4
  #    - uses: docker/setup-buildx-action@v3
  #    - uses: docker/login-action@v3
  #      with:
  #        registry: ghcr.io
  #        username: ${{ github.repository_owner }}
  #        password: ${{ secrets.GITHUB_TOKEN }}
  #    - name: Build & Push Images
  #      env:
  #        PRE_AUTH: 1
  #        IMAGE_NAME: centos-php
  #        VERSION_LIST: ${{ matrix.php_version }}
  #        VARIANT_LIST: cli cli-loaders fpm fpm-loaders
  #        PUSH_FLAG: 1
  #        INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #        PLATFORMS: linux/arm64
  #      run: bash php/scripts/build.sh

  # php-fpm:
  #   name: Build Warden PHP-FPM Images ${{ matrix.php_version }}
  #   runs-on: ubuntu-24.04-arm
  #   needs: [active, legacy]
  #   strategy:
  #     matrix:
  #       php_version: ["7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]
  #       php_variant: ["fpm-loaders"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & Push Images (GitHub)
  #       env:
  #         BUILD_GROUP: php-fpm
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"
  #     - uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build & Push Images (Docker Hub)
  #       env:
  #         BUILD_GROUP: php-fpm
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"

  # magento1:
  #   name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (magento1)
  #   runs-on: ubuntu-24.04-arm
  #   needs: php-fpm
  #   strategy:
  #     matrix:
  #       php_version: ["7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]
  #       php_variant: ["fpm-loaders"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & Push Images
  #       env:
  #         BUILD_GROUP: php-fpm/magento1
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"
  #     - uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build & Push Images (Docker Hub)
  #       env:
  #         BUILD_GROUP: php-fpm/magento1
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"

  # magento2:
  #   name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (magento2)
  #   runs-on: ubuntu-24.04-arm
  #   needs: php-fpm
  #   strategy:
  #     matrix:
  #       php_version: ["7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]
  #       php_variant: ["fpm-loaders"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & Push Images
  #       env:
  #         BUILD_GROUP: php-fpm/magento2
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"
  #     - uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build & Push Images (Docker Hub)
  #       env:
  #         BUILD_GROUP: php-fpm/magento2
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"

  # orocommerce:
  #   name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (OroCommerce)
  #   runs-on: ubuntu-24.04-arm
  #   needs: php-fpm
  #   strategy:
  #     matrix:
  #       php_version: ["8.2", "8.3", "8.4"]
  #       php_variant: ["fpm-loaders"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & Push Images
  #       env:
  #         BUILD_GROUP: php-fpm/orocommerce
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: 0 # ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"
  #     - uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build & Push Images (Docker Hub)
  #       env:
  #         BUILD_GROUP: php-fpm/orocommerce
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"
