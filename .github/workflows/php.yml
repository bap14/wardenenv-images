name: PHP Images
on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # 6 AM Daily
  push:
    branches:
      - main
      - develop
    paths:
      - php/**
      - .github/workflows/php.yml
      - php-fpm/**
      - scripts/build.sh
env:
  BASE_IMAGE_NAME: ${{ vars.IMAGE_NAME || 'ghcr.io/wardenenv/centos-php' }}
  WARDEN_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}
  PHP_SOURCE_IMAGE: ${{ vars.PHP_SOURCE_IMAGE || 'ghcr.io/wardenenv/centos-php' }}
jobs:
  php-setup:
    name: PHP Setup
    runs-on: ubuntu-latest
    outputs:
      active_versions: ${{ steps.get_php_versions.outputs.active_versions}}
      active_major_versions: ${{ steps.get_php_versions.outputs.active_major_versions}}
      active_minor_versions: ${{ steps.get_php_versions.outputs.active_minor_versions}}
      legacy_versions: ${{ steps.get_php_versions.outputs.legacy_versions}}
      legacy_major_versions: ${{ steps.get_php_versions.outputs.legacy_major_versions}}
      legacy_minor_versions: ${{ steps.get_php_versions.outputs.legacy_minor_versions}}
    steps:
      - name: Gather PHP Versions
        id: get_php_versions
        env:
          MINIMUM_VERSION: "7.4"
        run: |
          MIN_VERS=$(echo $MINIMUM_VERSION | sed -E 's/([0-9]+\.[0-9]+)(\..*)?/\1/')
          STATES=$(curl -o- "https://www.php.net/releases/states?json" 2>/dev/null)
          ALL_VERSIONS=$(echo "$STATES" | jq --arg minVers "$MIN_VERS" '[ .[] | to_entries[] | .key as $version | select(.key >= $minVers) | { "version": $version, "state": .value.state } ]')

          ACTIVE_VERSIONS='{"major": [], "minor": []}'
          LEGACY_VERSIONS='{"major": [], "minor": []}'

          for RELEASE in $(echo "$ALL_VERSIONS" | jq -c '.[]'); do
            STATE=$(echo "$RELEASE" | jq -r '.state')
            MAJOR_VERSION=$(echo "$RELEASE" | jq -r '.version')
            MINOR_VERSION=$(curl -o- "https://www.php.net/releases/?json&version=${MAJOR_VERSION}" 2>/dev/null | jq -r '.version')

            if [[ "$STATE" = "eol" ]]; then
              LEGACY_VERSIONS=$(echo "$LEGACY_VERSIONS" | jq -c --arg newVers $MAJOR_VERSION '.major[ .major | length ] |= .major + $newVers | .major |= sort')
              LEGACY_VERSIONS=$(echo "$LEGACY_VERSIONS" | jq -c --arg newVers $MINOR_VERSION '.minor[ .minor | length ] |= .minor + $newVers | .minor |= sort')
            else
              ACTIVE_VERSIONS=$(echo "$ACTIVE_VERSIONS" | jq -c --arg newVers $MAJOR_VERSION '.major[ .major | length ] |= .major + $newVers | .major |= sort')
              ACTIVE_VERSIONS=$(echo "$ACTIVE_VERSIONS" | jq -c --arg newVers $MINOR_VERSION '.minor[ .minor | length ] |= .minor + $newVers | .minor |= sort')
            fi
          done

          echo "active_versions=$(echo $ACTIVE_VERSIONS | jq -c '.major + .minor | sort')" >> $GITHUB_OUTPUT
          echo "active_major_versions=$(echo $ACTIVE_VERSIONS | jq -c '.major')" >> $GITHUB_OUTPUT
          echo "active_minor_versions=$(echo $ACTIVE_VERSIONS | jq -c '.minor')" >> $GITHUB_OUTPUT
          
          echo "legacy_versions=$(echo $LEGACY_VERSIONS | jq -c '.major + .minor | sort')" >> $GITHUB_OUTPUT
          echo "legacy_major_versions=$(echo $LEGACY_VERSIONS | jq -c '.major')" >> $GITHUB_OUTPUT
          echo "legacy_minor_versions=$(echo $LEGACY_VERSIONS | jq -c '.minor')" >> $GITHUB_OUTPUT

          echo "::notice title=Active PHP Versions Identified::$(echo $ACTIVE_VERSIONS | jq -c '.major + .minor')"
          echo "::notice title=Legacy PHP Versions Identified::$(echo $LEGACY_VERSIONS | jq -c '.major + .minor')"
  legacy-php:
    name: Build Legacy PHP Images
    runs-on: ubuntu-latest
    needs:
      - php-setup
    strategy:
      matrix:
        php_version: ${{ fromJSON(needs.php-setup.outputs.legacy_major_versions) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
        with:
          platforms: |
            linux/amd64
            linux/arm64
        #  # network=host driver-opt needed to push to local registry
        #  driver-opts: network=host
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Images
        id: build-legacy
        env:
          PRE_AUTH: 1
          VERSION_LIST: ${{ matrix.php_version }}
          VARIANT_LIST: cli cli-loaders fpm fpm-loaders
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        run: bash php/scripts/build.sh
        # TODO: Determine proper guard for this step to only push in certain instances
      - name: Push Built Images
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ fromJSON(steps.build-legacy.outputs.built_tags) }}
  active-php:
    name: Build Active PHP Images
    runs-on: ubuntu-latest
    needs:
      - php-setup
    strategy:
      matrix:
        php_version: ${{ fromJSON(needs.php-setup.outputs.active_major_versions) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
        with:
          platforms: |
            linux/amd64
            linux/arm64
        #  # network=host driver-opt needed to push to local registry
        #  driver-opts: network=host
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Images
        id: build-active
        env:
          PRE_AUTH: 1
          VERSION_LIST: ${{ matrix.php_version }}
          VARIANT_LIST: cli cli-loaders fpm fpm-loaders
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
        run: bash php/scripts/build.sh
      # TODO: Determine proper guard for this step to only push in certain instances
      - name: Push Built Images
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ fromJSON(steps.build-active.outputs.built_tags) }}
#  php-fpm:
#    name: Build Warden PHP-FPM Images ${{ matrix.php_version }}
#    runs-on: ubuntu-latest
#    needs: [active-php, legacy-php]
#    strategy:
#      matrix:
#        php_version:
#          - ${{ fromJSON(needs.php-setup.outputs.php_major_versions) }}
#          - ${{ fromJSON(needs.php-setup.outputs.legacy_major_versions) }}
#        php_variant: ["fpm-loaders"]
#    steps:
#      - uses: actions/checkout@v3
#      - uses: docker/setup-qemu-action@v2
#      - uses: docker/setup-buildx-action@v2
#      - uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Build & Push Images (GitHub)
#        env:
#          BUILD_GROUP: php-fpm
#          PRE_AUTH: 1
#          # WARDEN_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}
#          # PHP_SOURCE_IMAGE: ${{ vars.PHP_SOURCE_IMAGE || 'ghcr.io/wardenenv/centos-php' }}
#          PUSH_FLAG: 1
#          PHP_VERSION: ${{ matrix.php_version }}
#          PHP_VARIANT: ${{ matrix.php_variant }}
#          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
#        run: bash scripts/build.sh "${BUILD_GROUP}"
#      - uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Build & Push Images (Docker Hub)
#        env:
#          BUILD_GROUP: php-fpm
#          PRE_AUTH: 1
#          # PHP_SOURCE_IMAGE: ${{ vars.PHP_SOURCE_IMAGE || 'ghcr.io/wardenenv/centos-php' }}
#          PUSH_FLAG: 1
#          PHP_VERSION: ${{ matrix.php_version }}
#          PHP_VARIANT: ${{ matrix.php_variant }}
#          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
#        run: bash scripts/build.sh "${BUILD_GROUP}"
# 
#  magento1:
#    name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (magento1)
#    runs-on: ubuntu-latest
#    needs: php-fpm
#    strategy:
#      matrix:
#        php_version:
#          - ${{ fromJSON(needs.php-setup.outputs.php_major_versions) }}
#          - ${{ fromJSON(needs.php-setup.outputs.legacy_major_versions) }}
#        php_variant: ["fpm-loaders"]
#    steps:
#      - uses: actions/checkout@v3
#      - uses: docker/setup-qemu-action@v2
#      - uses: docker/setup-buildx-action@v2
#      - uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Build & Push Images
#        env:
#          BUILD_GROUP: php-fpm/magento1
#          PRE_AUTH: 1
#          # WARDEN_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}
#          # PHP_SOURCE_IMAGE: ${{ vars.PHP_SOURCE_IMAGE || 'ghcr.io/wardenenv/centos-php' }}
#          PUSH_FLAG: 1
#          PHP_VERSION: ${{ matrix.php_version }}
#          PHP_VARIANT: ${{ matrix.php_variant }}
#          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
#        run: bash scripts/build.sh "${BUILD_GROUP}"
#      - uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Build & Push Images (Docker Hub)
#        env:
#          BUILD_GROUP: php-fpm/magento1
#          PRE_AUTH: 1
#          # PHP_SOURCE_IMAGE: ${{ vars.PHP_SOURCE_IMAGE || 'ghcr.io/wardenenv/centos-php' }}
#          PUSH_FLAG: 1
#          PHP_VERSION: ${{ matrix.php_version }}
#          PHP_VARIANT: ${{ matrix.php_variant }}
#          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
#        run: bash scripts/build.sh "${BUILD_GROUP}"
# 
#  magento2:
#    name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (magento2)
#    runs-on: ubuntu-latest
#    needs: php-fpm
#    strategy:
#      matrix:
#        php_version:
#          - ${{ fromJSON(needs.php-setup.outputs.php_major_versions) }}
#          - ${{ fromJSON(needs.php-setup.outputs.legacy_major_versions) }}
#        php_variant: ["fpm-loaders"]
#    steps:
#      - uses: actions/checkout@v3
#      - uses: docker/setup-qemu-action@v2
#      - uses: docker/setup-buildx-action@v2
#      - uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Build & Push Images
#        env:
#          BUILD_GROUP: php-fpm/magento2
#          PRE_AUTH: 1
#          # WARDEN_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}
#          # PHP_SOURCE_IMAGE: ${{ vars.PHP_SOURCE_IMAGE || 'ghcr.io/wardenenv/centos-php' }}
#          PUSH_FLAG: 1
#          PHP_VERSION: ${{ matrix.php_version }}
#          PHP_VARIANT: ${{ matrix.php_variant }}
#          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
#        run: bash scripts/build.sh "${BUILD_GROUP}"
#      - uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Build & Push Images (Docker Hub)
#        env:
#          BUILD_GROUP: php-fpm/magento2
#          PRE_AUTH: 1
#          # PHP_SOURCE_IMAGE: ${{ vars.PHP_SOURCE_IMAGE || 'ghcr.io/wardenenv/centos-php' }}
#          PUSH_FLAG: 1
#          PHP_VERSION: ${{ matrix.php_version }}
#          PHP_VARIANT: ${{ matrix.php_variant }}
#          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
#        run: bash scripts/build.sh "${BUILD_GROUP}"
# 
#  orocommerce:
#    name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (OroCommerce)
#    runs-on: ubuntu-latest
#    needs: php-fpm
#    strategy:
#      matrix:
#        php_version:
#          - ${{ fromJSON(needs.php-setup.outputs.php_major_versions) }}
#        php_variant: ["fpm-loaders"]
#    steps:
#      - uses: actions/checkout@v3
#      - uses: docker/setup-qemu-action@v2
#      - uses: docker/setup-buildx-action@v2
#      - uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Build & Push Images
#        env:
#          BUILD_GROUP: php-fpm/orocommerce
#          PRE_AUTH: 1
#          # WARDEN_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}
#          # PHP_SOURCE_IMAGE: ${{ vars.PHP_SOURCE_IMAGE || 'ghcr.io/wardenenv/centos-php' }}
#          PUSH_FLAG: 1
#          PHP_VERSION: ${{ matrix.php_version }}
#          PHP_VARIANT: ${{ matrix.php_variant }}
#          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
#        run: bash scripts/build.sh "${BUILD_GROUP}"
#      - uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Build & Push Images (Docker Hub)
#        env:
#          BUILD_GROUP: php-fpm/orocommerce
#          PRE_AUTH: 1
#          # PHP_SOURCE_IMAGE: ${{ vars.PHP_SOURCE_IMAGE || 'ghcr.io/wardenenv/centos-php' }}
#          PUSH_FLAG: 1
#          PHP_VERSION: ${{ matrix.php_version }}
#          PHP_VARIANT: ${{ matrix.php_variant }}
#          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
#        run: bash scripts/build.sh "${BUILD_GROUP}"
# 