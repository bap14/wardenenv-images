name: Docker Image PHP
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build'
        required: true
        default: 'development'
  schedule:
    - cron: "0 6 * * *" # 6 AM Daily
  push:
    branches:
      - main
      - develop
    paths:
      - php/**
      - .github/workflows/php.yml
      - php-fpm/**
      - scripts/build.sh

env:
  WARDEN_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}
  DOCKERHUB_IMAGE_REPOSITORY: ${{ vars.DOCKERHUB_USERNAME || 'wardenenv' }}
  PHP_SOURCE_IMAGE_REPOSITORY: ${{ vars.WARDEN_IMAGE_REPOSITORY || 'ghcr.io/wardenenv' }}
  PHP_SOURCE_IMAGE_NAME: ${{ vars.PHP_SOURCE_IMAGE_NAME || 'centos-php' }}

jobs:
  # Get PHP versions directly from PHP releases and state files
  php-versions:
    name: PHP Setup
    runs-on: ubuntu-24.04-arm
    outputs:
      stable_versions: ${{ steps.get_php_versions.outputs.php_stable_versions }}
      security_versions: ${{ steps.get_php_versions.outputs.php_security_versions }}
      eol_versions: ${{ steps.get_php_versions.outputs.php_eol_versions}}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/get-php-versions
        id: get_php_versions
        with:
          version-constraint: ">=7.4"

  # Define some values for later stages
  define-environment:
    name: Setup Common Variables
    runs-on: ubuntu-24.04-arm
    outputs:
      environment: ${{ steps.populate_variables.outputs.environment }}
    env:
      ENVIRONMENT: ${{ inputs.environment }}
    steps:
      - name: Set Variables
        id: populate_variables
        run: |
          echo "environment=${ENVIRONMENT:-}" >> $GITHUB_OUTPUT

  define-variables:
    name: Define variables for later jobs
    runs-on: ubuntu-24.04-arm
    needs: [define-environment]
    environment: ${{ needs.define-environment.outputs.environment }}
    outputs:
      registries: ${{ steps.define-vars.outputs.registries }}
      php_source_image: ${{ steps.define-vars.outputs.php_source_image }}
    steps:
      - name: Define registries
        id: define-vars
        run: |
          REGISTRIES="[]"
          REGISTRIES=$(jq -c --arg registry "${WARDEN_IMAGE_REPOSITORY}" '. + [$registry]' <<< $REGISTRIES)
          REGISTRIES=$(jq -c --arg registry "${DOCKERHUB_IMAGE_REPOSITORY}" '. + [$registry]' <<< $REGISTRIES)
          echo "registries=${REGISTRIES}" >> $GITHUB_OUTPUT

          PHP_SOURCE_IMAGE="${PHP_SOURCE_IMAGE_REPOSITORY}/${PHP_SOURCE_IMAGE_NAME}"
          echo "php_source_image=${PHP_SOURCE_IMAGE}" >> $GITHUB_OUTPUT

          echo "::notice title=List of registries to push to::${REGISTRIES}"
          echo "::notice title=PHP source image to use::${PHP_SOURCE_IMAGE_REPOSITORY}/${PHP_SOURCE_IMAGE_NAME}"

  build-cli:
    name: Build CLI
    needs: [php-versions, define-environment]
    environment: ${{ needs.define-environment.outputs.environment }}
    strategy:
      matrix:
        php_version:
          - ${{ fromJSON(needs.php-versions.outputs.eol_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.security_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.stable_versions).major }}
        platform: [linux/arm64, linux/amd64]
        variant: [cli]
        runner: [ubuntu-24.04-arm, ubuntu-latest]
        exclude:
          # Don't build arm on amd and vice-versa
          - platform: linux/arm64
            runner: ubuntu-latest
          - platform: linux/amd64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push Digests
        env:
          PRE_AUTH: 1
          IMAGE_NAME: centos-php
          VERSION_LIST: ${{ matrix.php_version }}
          VARIANT_LIST: ${{ matrix.variant }}
          PUSH_FLAG: 1
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
          PLATFORM: ${{ matrix.platform }}
          METADATA_DIR: ${{ runner.temp }}/metadata
        run: bash php/scripts/build.sh
      - name: Push Metadata Files
        uses: actions/upload-artifact@v4
        with:
          name: metadata-${{ matrix.php_version }}-${{ matrix.variant }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/metadata/*
          if-no-files-found: error
          retention-days: 1

  push-cli:
    name: Push CLI
    runs-on: ubuntu-24.04-arm
    needs: [php-versions, define-environment, build-cli]
    environment: ${{ needs.define-environment.outputs.environment }}
    strategy:
      matrix:
        php_version:
          - ${{ fromJSON(needs.php-versions.outputs.eol_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.security_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.stable_versions).major }}
        variant: [cli]
    steps:
      - name: Download metadata
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/metadata
          pattern: metadata-${{ matrix.php_version}}-${{ matrix.variant }}-*
          merge-multiple: true
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list ${{ matrix.php_version }}
        run: |
          metadata=$(jq -s '
            reduce .[] as $item ({};
              reduce($item | to_entries[]) as $entry (.;
                .[$entry.key].tags = ((.[$entry.key].tags // []) + ($entry.value.tags // [])) |
                .[$entry.key].digests = ((.[$entry.key].digests // []) + ($entry.value.digests // [])) |
                .[$entry.key].image = (.[$entry.key].image // $entry.value.image)
              )
            )
            | with_entries(.value.tags |= unique)
            | with_entries(.value.digests |= unique)
          ' ${{ runner.temp }}/metadata/*)
        
          for hash in $(jq -r '. | keys[]' <<< "$metadata"); do
            image=$(jq -r --arg hash "$hash" '.[$hash].image' <<< "$metadata")
            tagDigests=$(jq -r --arg hash "$hash" '.[$hash] | { tags: .tags, digests: .digests }' <<< "$metadata")
            docker buildx imagetools create \
              $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$tagDigests") \
              $(jq -cr --arg image "${image}" '.digests | map($image + "@" + .) | join(" ")' <<< "$tagDigests")
          done

  build-cli-loaders-and-fpm:
    name: Build CLI-Loaders, FPM
    needs: [php-versions, define-environment, push-cli]
    environment: ${{ needs.define-environment.outputs.environment }}
    strategy:
      matrix:
        php_version:
          - ${{ fromJSON(needs.php-versions.outputs.eol_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.security_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.stable_versions).major }}
        platform: [linux/arm64, linux/amd64]
        variant: [cli-loaders, fpm]
        runner: [ubuntu-24.04-arm, ubuntu-latest]
        exclude:
          # Don't build arm on amd and vice-versa
          - platform: linux/arm64
            runner: ubuntu-latest
          - platform: linux/amd64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push Images
        env:
          PRE_AUTH: 1
          IMAGE_NAME: centos-php
          VERSION_LIST: ${{ matrix.php_version }}
          VARIANT_LIST: ${{ matrix.variant }}
          PUSH_FLAG: 1
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
          PLATFORM: ${{ matrix.platform }}
          METADATA_DIR: ${{ runner.temp }}/metadata
        run: bash php/scripts/build.sh
      - name: Push Metadata Files
        uses: actions/upload-artifact@v4
        with:
          name: metadata-${{ matrix.php_version }}-${{ matrix.variant }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/metadata/*
          if-no-files-found: error
          retention-days: 1

  push-cli-loaders-and-fpm:
    name: Push CLI-Loaders, FPM
    runs-on: ubuntu-24.04-arm
    needs: [php-versions, define-environment, build-cli-loaders-and-fpm]
    environment: ${{ needs.define-environment.outputs.environment }}
    strategy:
      matrix:
        php_version:
          - ${{ fromJSON(needs.php-versions.outputs.eol_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.security_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.stable_versions).major }}
        variant: [cli-loaders, fpm]
    steps:
      - name: Download metadata
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/metadata
          pattern: metadata-${{ matrix.php_version}}-${{ matrix.variant }}-*
          merge-multiple: true
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list ${{ matrix.php_version }}
        run: |
          metadata=$(jq -s '
            reduce .[] as $item ({};
              reduce($item | to_entries[]) as $entry (.;
                .[$entry.key].tags = ((.[$entry.key].tags // []) + ($entry.value.tags // [])) |
                .[$entry.key].digests = ((.[$entry.key].digests // []) + ($entry.value.digests // [])) |
                .[$entry.key].image = (.[$entry.key].image // $entry.value.image)
              )
            )
            | with_entries(.value.tags |= unique)
            | with_entries(.value.digests |= unique)
          ' ${{ runner.temp }}/metadata/*)
        
          for hash in $(jq -r '. | keys[]' <<< "$metadata"); do
            image=$(jq -r --arg hash "$hash" '.[$hash].image' <<< "$metadata")
            tagDigests=$(jq -r --arg hash "$hash" '.[$hash] | { tags: .tags, digests: .digests }' <<< "$metadata")
            docker buildx imagetools create \
              $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$tagDigests") \
              $(jq -cr --arg image "${image}" '.digests | map($image + "@" + .) | join(" ")' <<< "$tagDigests")
          done

  build-fpm-loaders:
    name: Build FPM-Loaders
    needs: [php-versions, define-environment, push-cli-loaders-and-fpm]
    environment: ${{ needs.define-environment.outputs.environment }}
    strategy:
      matrix:
        php_version:
          - ${{ fromJSON(needs.php-versions.outputs.eol_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.security_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.stable_versions).major }}
        platform: [linux/arm64, linux/amd64]
        variant: [fpm-loaders]
        runner: [ubuntu-24.04-arm, ubuntu-latest]
        exclude:
          # Don't build arm on amd and vice-versa
          - platform: linux/arm64
            runner: ubuntu-latest
          - platform: linux/amd64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push Images
        env:
          PRE_AUTH: 1
          IMAGE_NAME: centos-php
          VERSION_LIST: ${{ matrix.php_version }}
          VARIANT_LIST: ${{ matrix.variant }}
          PUSH_FLAG: 1
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
          PLATFORM: ${{ matrix.platform }}
          METADATA_DIR: ${{ runner.temp }}/metadata
        run: bash php/scripts/build.sh
      - name: Push Metadata Files
        uses: actions/upload-artifact@v4
        with:
          name: metadata-${{ matrix.php_version }}-${{ matrix.variant }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/metadata/*
          if-no-files-found: error
          retention-days: 1

  push-fpm-loaders:
    name: Push FPM-Loaders
    runs-on: ubuntu-24.04-arm
    needs: [php-versions, define-environment, build-fpm-loaders]
    environment: ${{ needs.define-environment.outputs.environment }}
    strategy:
      matrix:
        php_version:
          - ${{ fromJSON(needs.php-versions.outputs.eol_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.security_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.stable_versions).major }}
        variant: [fpm-loaders]
    steps:
      - name: Download metadata
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/metadata
          pattern: metadata-${{ matrix.php_version}}-${{ matrix.variant }}-*
          merge-multiple: true
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list ${{ matrix.php_version }}
        run: |
          metadata=$(jq -s '
            reduce .[] as $item ({};
              reduce($item | to_entries[]) as $entry (.;
                .[$entry.key].tags = ((.[$entry.key].tags // []) + ($entry.value.tags // [])) |
                .[$entry.key].digests = ((.[$entry.key].digests // []) + ($entry.value.digests // [])) |
                .[$entry.key].image = (.[$entry.key].image // $entry.value.image)
              )
            )
            | with_entries(.value.tags |= unique)
            | with_entries(.value.digests |= unique)
          ' ${{ runner.temp }}/metadata/*)
        
          for hash in $(jq -r '. | keys[]' <<< "$metadata"); do
            image=$(jq -r --arg hash "$hash" '.[$hash].image' <<< "$metadata")
            tagDigests=$(jq -r --arg hash "$hash" '.[$hash] | { tags: .tags, digests: .digests }' <<< "$metadata")
            docker buildx imagetools create \
              $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$tagDigests") \
              $(jq -cr --arg image "${image}" '.digests | map($image + "@" + .) | join(" ")' <<< "$tagDigests")
          done

  ##
  ## Images from here on are images potentially used in Warden environments
  ##

  build-php-fpm:
    name: PHP-FPM
    needs: [php-versions, define-environment, define-variables, push-fpm-loaders]
    environment: ${{ needs.define-environment.outputs.environment }}
    strategy:
      matrix:
        php_version:
          - ${{ fromJSON(needs.php-versions.outputs.eol_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.security_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.stable_versions).major }}
        platform: [linux/arm64, linux/amd64]
        build_group: [php-fpm]
        variant: [_base]
        runner: [ubuntu-24.04-arm, ubuntu-latest]
        exclude:
          # Don't build arm on amd and vice-versa
          - platform: linux/arm64
            runner: ubuntu-latest
          - platform: linux/amd64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build
        env:
          BUILD_GROUP: ${{ matrix.build_group }}
          PRE_AUTH: 1
          PUSH_FLAG: 1
          PHP_VERSION: ${{ matrix.php_version }}
          VARIANT: ${{ matrix.variant }}
          PLATFORM: ${{ matrix.platform }}
          INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
          REGISTRIES: ${{ needs.define-variables.outputs.registries }}
          PHP_SOURCE_IMAGE: ${{ needs.define-variables.outputs.php_source_image }}
        run: bash php-fpm/scripts/build.sh "${BUILD_GROUP}"
      - name: Push Metadata Files
        uses: actions/upload-artifact@v4
        with:
          name: metadata-${{ matrix.php_version }}-${{ matrix.build_group }}-${{ matrix.variant }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/metadata/*
          if-no-files-found: error
          retention-days: 1

  push-php-fpm:
    name: Push PHP-FPM
    runs-on: ubuntu-24.04-arm
    needs: [php-versions, define-environment, build-php-fpm]
    environment: ${{ needs.define-environment.outputs.environment }}
    strategy:
      matrix:
        php_version:
          - ${{ fromJSON(needs.php-versions.outputs.eol_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.security_versions).major }}
          - ${{ fromJSON(needs.php-versions.outputs.stable_versions).major }}
        build_group: [php-fpm]
        variant: [_base]
        registry: ${{ fromJSON(needs.setup-registry-list.outputs.registries) }}
    steps:
      - name: Download metadata
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/metadata
          pattern: metadata-${{ matrix.php_version}}-${{ matrix.build_group }}-${{ matrix.variant }}-*
          merge-multiple: true
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Create manifest list ${{ matrix.php_version }}
        env:
          IMAGE_REGISTRY: ${{ matrix.registry }}
        run: |
          metadata=$(jq -s '
            reduce .[] as $item ({};
              reduce($item | to_entries[]) as $entry (.;
                .[$entry.key].tags = ((.[$entry.key].tags // []) + ($entry.value.tags // [])) |
                .[$entry.key].digests = ((.[$entry.key].digests // []) + ($entry.value.digests // [])) |
                .[$entry.key].image = (.[$entry.key].image // $entry.value.image)
              )
            )
            | with_entries(.value.tags |= unique)
            | with_entries(.value.digests |= unique)
          ' ${{ runner.temp }}/metadata/*)
        
          for hash in $(jq -r '. | keys[]' <<< "$metadata"); do
            image=$(jq -r --arg hash "$hash" '.[$hash].image' <<< "$metadata")
            tagDigests=$(jq -r --arg hash "$hash" '.[$hash] | { tags: .tags, digests: .digests }' <<< "$metadata")

            docker buildx imagetools create \
              $(jq -cr --arg registry "${IMAGE_REGISTRY}" '.tags | map("-t " + $registry + "/" + .) | join(" ")' <<< "$tagDigests") \
              $(jq -cr --arg registry "${IMAGE_REGISTRY}" --arg image "${image}" '.digests | map($registry + "/" + $image + "@" + .) | join(" ")' <<< "$tagDigests")
          done

  # magento1:
  #   name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (magento1)
  #   runs-on: ubuntu-24.04-arm
  #   needs: php-fpm
  #   strategy:
  #     matrix:
  #       php_version: ["7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]
  #       php_variant: ["fpm-loaders"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & Push Images
  #       env:
  #         BUILD_GROUP: php-fpm/magento1
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"
  #     - uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build & Push Images (Docker Hub)
  #       env:
  #         BUILD_GROUP: php-fpm/magento1
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"

  # magento2:
  #   name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (magento2)
  #   runs-on: ubuntu-24.04-arm
  #   needs: php-fpm
  #   strategy:
  #     matrix:
  #       php_version: ["7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]
  #       php_variant: ["fpm-loaders"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & Push Images
  #       env:
  #         BUILD_GROUP: php-fpm/magento2
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"
  #     - uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build & Push Images (Docker Hub)
  #       env:
  #         BUILD_GROUP: php-fpm/magento2
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"

  # orocommerce:
  #   name: Build Warden PHP-FPM Images ${{ matrix.php_version }} (OroCommerce)
  #   runs-on: ubuntu-24.04-arm
  #   needs: php-fpm
  #   strategy:
  #     matrix:
  #       php_version: ["8.2", "8.3", "8.4"]
  #       php_variant: ["fpm-loaders"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & Push Images
  #       env:
  #         BUILD_GROUP: php-fpm/orocommerce
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: 0 # ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"
  #     - uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build & Push Images (Docker Hub)
  #       env:
  #         BUILD_GROUP: php-fpm/orocommerce
  #         PRE_AUTH: 1
  #         PUSH_FLAG: 1
  #         PHP_VERSION: ${{ matrix.php_version }}
  #         PHP_VARIANT: ${{ matrix.php_variant }}
  #         INDEV_FLAG: ${{ github.ref == 'refs/heads/main' && '0' || '1' }}
  #       run: bash scripts/build.sh "${BUILD_GROUP}"
